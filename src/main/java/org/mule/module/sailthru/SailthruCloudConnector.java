/**
 * foo.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.sailthru;

import java.io.IOException;
import java.net.URI;
import java.text.Format;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.apache.commons.lang.time.DateFormatUtils;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.Transformer;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.module.sailthru.api.MuleSailthruClient;
import org.mule.module.sailthru.api.SailthruClientSailthru;
import org.mule.transport.NullPayload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Provides access to the sailthru api.
 * 
 * @author craig
 *
 */
@Module(name = "sailthru", schemaVersion = "2.0")
public class SailthruCloudConnector
{
	public static final String BASE_URI = "http://api.sailthru.com";
	public static final String MIME_TYPE = "application/x-www-form-urlencoded";
	public static final String RESPONSE_FORMAT = "json";
	public static final Format DEFAULT_DATEFORMAT = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT;
	
	private final Logger LOG = LoggerFactory.getLogger(this.getClass());
	
	/**
	 * The api base to use.
	 */
	@Configurable
	@Optional
	@Default(value=BASE_URI)
	private URI apiBaseURI;
	
    /**
     * The shared secret
     */
    @Configurable
    private String sharedSecret;

    /**
     * The api key
     */
    @Configurable
    private String apiKey;

    /**
     * The <code>MuleSailthruClient</code>
     */
    @Configurable
	@Optional
	private MuleSailthruClient client;
    
    /**
     * @param apiKey The api key
     * @param sharedSecret The shared secret
     * @param apiBaseURI the URI for the service
     * @throws ConnectionException
     */

    @PostConstruct
    public void connect() throws ConnectionException
    {
        LOG.debug("Checking if client exists");
        if(null == client)
        {
            try
            {
                LOG.debug("Creating cliet");
                this.client = new SailthruClientSailthru(this.apiKey, this.sharedSecret, this.apiBaseURI.toString());
                LOG.debug("Got a new client");
            } catch (Exception e)
            {
                LOG.error("Something bad happened", e);
            }
        }
    }
    
    /**
     * Sends an email.s
     * 
     * {@sample.xml ../../../doc/mule-module-sailthru.xml.sample sailthru:send}
     * 
     * @param emailAddress The email address to send to
     * @param template The template to use
     * @param vars The variables to use
     * @param scheduledTime the time to send at
     * @param options Options to use
     * @return The result of the send
     * @throws Exception
     */
    @Processor
    public Map<String,Object> send(String emailAddress, String template, 
            @Optional Map<String,Object> vars,
            @Optional Date scheduledTime,
            @Optional Map<String,Object> options) throws IOException
    {        
        return this.client.send(Collections.singleton(emailAddress), template, vars, scheduledTime, options);
    }
    
    /**
     * Sends an email.s
     * 
     * {@sample.xml ../../../doc/mule-module-sailthru.xml.sample sailthru:send}
     * 
     * @param emailAddresses The email address to send to
     * @param template The template to use
     * @param vars The variables to use
     * @param scheduledTime the time to send at
     * @param options Options to use
     * @return The result of the send
     * @throws Exception
     */
    @Processor
    public Map<String,Object> multiSend(Collection<String> emailAddresses, String template, 
            @Optional Map<String,Object> vars,
            @Optional Date scheduledTime,
            @Optional Map<String,Object> options) throws IOException
    {        
        return this.client.send(emailAddresses, template, vars, scheduledTime, options);
    }
    
    /**
     * Upserts a subscriber
     * 
     * {@sample.xml ../../../doc/mule-module-sailthru.xml.sample sailthru:email}
     * 
     * @param emailAddress The email address
     * @param vars The variables to use
     * @param lists Lists (as keys) and 1 or 0 to join or remove
     * @param optout The global optout for this user
     * @return The data stored in sailthru
     * @throws Exception
     */
    @Processor
    public Map<String,Object> email(String emailAddress, 
            @Optional Map<String,Object> vars, @Optional Map<String,Integer> lists, @Optional String optout) throws IOException
    {        
        return this.client.email(emailAddress, vars, lists, optout);
    }
    
    /**
     * Advanced user management
     * 
     * {@sample.xml ../../../doc/mule-module-sailthru.xml.sample sailthru:user}
     */ 
    
    /**
     * Advanced user management
     * 
     * {@sample.xml ../../../doc/mule-module-sailthru.xml.sample sailthru:user}
     * 
     * @param id the ID value
     * @param keyType the kind of ID
     * @param idKeys Additional keys to set
     * @param fields Fields to return
     * @param vars Values to set on the user
     * @param lists Lists to auto-join
     * @param optout Optout from blasts
     * @param login Login the user
     * @param keysConflict How to handle key conflicts
     * @return Returns the result of updating the user
     */
    @Processor
    public Map<String,Object> user(final String id, final String keyType,
            @Optional final Map<String, String> idKeys, 
            @Optional final List<String> fields, 
            @Optional final Map<String, Object> vars,
            @Optional final Map<String, Integer> lists, 
            @Optional final String optout, @Optional final Boolean login, 
            @Optional final String keysConflict) throws IOException
     {

        return this.client.user(id, keyType, idKeys, fields, vars, lists, optout, login, keysConflict);
     }

    public void setClient(MuleSailthruClient client)
    {
    	this.client=client;
    }
    
    public void setApiBaseURI(URI apiBaseURI)
    {
        this.apiBaseURI = apiBaseURI;
    }
    
    public void setApiKey(String apiKey)
    {
        this.apiKey = apiKey;
    }
    
    public void setSharedSecret(String sharedSecret)
    {
        this.sharedSecret = sharedSecret;
    }
}
