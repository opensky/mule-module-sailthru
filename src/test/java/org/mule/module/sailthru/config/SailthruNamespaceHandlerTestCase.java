/**
 * foo.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.sailthru.config;

import static org.junit.Assert.assertEquals;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.codehaus.jackson.map.ObjectMapper;
import org.junit.Test;
import org.mule.api.MuleEvent;
import org.mule.construct.Flow;
import org.mule.module.sailthru.SailthruCloudConnector;
import org.mule.module.sailthru.api.MuleSailthruClient;
import org.mule.tck.junit4.FunctionalTestCase;
import org.mule.util.IOUtils;


public class SailthruNamespaceHandlerTestCase extends FunctionalTestCase
{
	Properties props;
	
	MuleSailthruClient client;
	
    @Override
    protected String getConfigResources()
    {
        return"sailthru-namespace-config.xml";
    }
    
    @Override
    protected void doSetUp() throws Exception
    {
    	super.doSetUp();
    	
    	props = new Properties();
		props.load(IOUtils.getResourceAsStream("test.properties", this.getClass(),false,true));
        
        props.putAll(System.getProperties());
		
		client = muleContext.getRegistry().get("mockClient");
		SailthruCloudConnector conn = muleContext.getRegistry().get("sailthruConfig");
		conn.setClient(client);
    }

    @Test
    public void testSendMessageToFlow()throws Exception
    {
    	
    	Map<String,String> payload = new HashMap<String,String>();
    	payload.put("email", "craig.skinfill@gmail.com");
    	payload.put("template","user.welcome");
        
        Map<String,Object> response = new ObjectMapper().readValue(props.getProperty("response.send"), Map.class);
        
        when(client.send(eq(Collections.singleton("craig.skinfill@gmail.com")), eq("user.welcome"), anyMap(), any(Date.class), anyMap()))
            .thenReturn(response);
        
    	Flow flow = lookupFlowConstruct("theFlow");
    	MuleEvent event = getTestEvent(payload);
    	MuleEvent responseEvent = flow.process(event);

    	assertEquals(response,responseEvent.getMessage().getPayload());
    }

    @Test
    public void testSendMessageToMultiSendFlow()throws Exception
    {
        
        Map<String,Object> payload = new HashMap<String,Object>();
        payload.put("email", Collections.singleton("craig.skinfill@gmail.com"));
        payload.put("template","user.welcome");
        
        Map<String,Object> response = new ObjectMapper().readValue(props.getProperty("response.send"), Map.class);
        
        when(client.send(eq(Collections.singleton("craig.skinfill@gmail.com")), eq("user.welcome"), anyMap(), any(Date.class), anyMap()))
            .thenReturn(response);
        
        Flow flow = lookupFlowConstruct("multiSendFlow");
        MuleEvent event = getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(response,responseEvent.getMessage().getPayload());
    }
    
    public void failingtestSendMessageToUserFlow()throws Exception
    {
        
        String payload = loadResourceAsString("/tmp/dump");
        
//        when(client.user("craig.skinfill@gmail.com", "user.welcome", null, null, null))
//            .thenReturn(response);
        
        Flow flow = lookupFlowConstruct("userFlow");
        MuleEvent event = getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);
        
//        assertEquals(response,responseEvent.getMessage().getPayload());
    }
    
    public void testSendMessageToEmailFlow()throws Exception
    {
        
        Map<String,String> payload = new HashMap<String,String>();
        payload.put("email", "craig.skinfill@gmail.com");
        payload.put("template","user.welcome");
        Map<String,Object> response = new ObjectMapper().readValue(props.getProperty("response.send"), Map.class);

        when(client.email(eq("craig.skinfill@gmail.com"),any(Map.class),any(Map.class),anyString()))
            .thenReturn(response);
        
        Flow flow = lookupFlowConstruct("emailFlow");
        MuleEvent event = getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);
        
//        verify(client).email(eq("craig.skinfill@gmail.com"), eq(Collections.EMPTY_MAP), eq(Collections.EMPTY_MAP), eq(OptOut.NULL));
    }

    private Flow lookupFlowConstruct(String name)
    {
        return(Flow)muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
